#!/usr/local/bin/python3.6
# This script takes the permissions sets generated by get_perms.py and assigns them (so far, only one set) to a list of 
# people - the users listed in the chi-folio-testers file.
# This one has logging, to help track down a problem I had with one tenant. 

import requests
import json
import logging

#logging.basicConfig(filename='crandebug.log', level=logging.DEBUG, format='%(asctime)s:%(levelname)s:%(message)s')
#logging.basicConfig(filename='snapshotdebug.log', level=logging.DEBUG, format='%(asctime)s:%(levelname)s:%(message)s')
logging.basicConfig(filename='foliotestdebug.log', level=logging.DEBUG, format='%(asctime)s:%(levelname)s:%(message)s')

CONFIG = {
# EBSCO Tenant settings
# These settings are kept offline. These values are placeholders.
#    'okapi_base_url': 'ebsco_url',
#    'username': 'username',
#    'password': 'password',
#    'tenant': 'tenant'
# Local tenants
# These also have placeholders for their settings.
#    'okapi_base_url': 'local_url1',
#    'okapi_base_url': 'local_url2',
#    'okapi_base_url': 'local_url3',
#    'okapi_base_url': 'local_url4',
#    'username': 'local_username',
#    'password': 'local_password',
#    'tenant': 'local_tenant',
# FOLIO project tenant settings
# Placeholders
#    'okapi_base_url': 'folio_url',
#    'username': 'folio_username',
#    'password': 'folio_password',
#    'tenant': 'folio_tenant',
   }

def get_auth_token():
    global CONFIG
    tenant = CONFIG['tenant']
    username = CONFIG['username']
    password = CONFIG['password']
    url = CONFIG['okapi_base_url'] + '/authn/login'
    headers = {"Content-type": "application/json", "X-Okapi-Tenant": tenant}
    payload = {"username": username, "password": password}
    r = requests.post(url, headers=headers, data=json.dumps(payload))
    return r.headers['x-okapi-token']

def get_user(token, uname):
    global CONFIG
    tenant = CONFIG['tenant']
    url = CONFIG['okapi_base_url'] + '/users?query=username=='+ uname
    headers = {"Content-type": "application/json", "X-Okapi-Tenant": tenant, "X-Okapi-Token": token}
    r = requests.get(url, headers=headers)
    u = r.json()
    udata = u['users']
    uid = udata[0]['id']
    return uid

# This section helpfully provided by Ian Hardy via Slack. I'm adapting it for my script.
# I want to take the uid from get_user and get the perms-id

def get_perms_id(uid, token):
    global CONFIG
    tenant = CONFIG['tenant']
    PERMS_SEARCH = CONFIG['okapi_base_url'] + '/perms/users/{}?indexField=userId'
    headers = {'X-Okapi-Tenant': tenant, 'Content-Type': 'application/json','X-Okapi-Token': token}
    r = requests.get(PERMS_SEARCH.format(uid), headers=headers)
    i = r.json()
#For some reason, print(i) lists all possible permissions on cranberry.
#    print("get-perms-id output")
#    print(i)
    return i['id']



def assign_perms(token, permissions_id):
    global CONFIG
    tenant = CONFIG['tenant']
    url = CONFIG['okapi_base_url'] + '/perms/users/' + permissions_id + '/permissions'
    headers = {"Content-type":"application/json", "X-Okapi-Tenant": tenant, "X-Okapi-Token": token}
    payload = {"permissionName": "all_perms_list"}
#    payload = {"permissionName": "folio_admin"}
    r = requests.post(url, headers=headers, json=payload)
#    print(url, headers, payload)
#    print(r)

#This is duplicated in main function
token = get_auth_token()
with open('chi-folio-testers', 'r') as f:
#with open('snapshot-users', 'r') as f:
    ulist = [uname.strip() for uname in f]
    for uname in ulist:
        user = uname.strip()
        print(user)
        uid = get_user(token, user)
        print(uid)
        permissions_id = get_perms_id(uid, token)
        print(permissions_id)
        assign_perms(token, permissions_id)

        print (uname)


#To be added when I get the assign_perms part to work.
#def main():
#    token = get_auth_token()
#    with open('chi-folio', 'r') as f:
#        ulist = [ulist.strip() for user in f]
#        for uname in ulist:
#            uid = get_user(token, uname)
#            permissions_id = get_perms_id(uid, token)
#            assign_perms(token, permissions_id)
#            print (uname)


#if __name__ == '__main__':
#     main()
